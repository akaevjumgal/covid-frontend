{"version":3,"sources":["services/covid-stats.service.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["path","fetch","this","method","response","json","country","period","from","to","App","observer","setDocumentTitle","document","title","fetchStatsByCountry","a","runInAction","isFetchingStats","moment","clone","subtract","format","CovidStatsService","activeCases","casesByCountry","selectedCountry","window","localStorage","setItem","fetchCountries","defaultCountry","countries","find","c","Slug","getItem","loading","className","value","onChange","onSelectCountry","map","s","key","Country","slice","reverse","activeCase","Date","Active","Deaths","Confirmed","Recovered","length","mostRecoveredCase","count","date","Math","max","t","foundedCase","React","Component","observable","action","event","persist","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e481466f.chunk.js","sourcesContent":["import {ActiveCaseModel, CountryModel, Period} from '../models/covid-stats.model'\n\nclass CovidStatsService {\n  private readonly path = 'https://api.covid19api.com'\n\n  async countries(): Promise<CountryModel[]> {\n    const response = await fetch(`${this.path}/countries`, {\n      method: 'get'\n    })\n    return await response.json()\n  }\n\n  async activeCases(country: string, period: Period): Promise<ActiveCaseModel[]> {\n    const response = await fetch(\n      `${this.path}/country/${country}?from=${period.from}&to=${period.to}`,\n      {\n        method: 'get'\n      }\n    )\n    return await response.json()\n  }\n}\n\nexport default new CovidStatsService()\n","import React, {ChangeEvent} from 'react'\nimport './App.scss'\nimport {ActiveCaseModel, CountryModel, Period} from './models/covid-stats.model'\nimport CovidStatsService from './services/covid-stats.service'\nimport {action, observable, runInAction} from 'mobx'\nimport {observer} from 'mobx-react'\nimport moment from 'moment'\n\nconst DEFAULT_SLUG = 'kyrgyzstan'\nconst DATE_FORMAT = 'DD MMMM'\nconst REQUEST_DATE_FORMAT = 'YYYY-MM-DDT[00:00:00Z]'\nconst STORAGE_KEY = 'country'\n\n@observer\nclass App extends React.Component {\n\n  @observable\n  private countries: CountryModel[] = []\n\n  @observable\n  private selectedCountry: string = ''\n\n  @observable\n  private casesByCountry: ActiveCaseModel[] = []\n\n  @observable\n  private loading: boolean = false\n\n  @observable\n  private isFetchingStats: boolean = false\n\n  async componentDidMount() {\n    await this.fetchCountries()\n    const defaultCountry = this.countries.find(c => c.Slug === DEFAULT_SLUG)\n\n    if (defaultCountry) {\n      this.selectedCountry = window.localStorage.getItem(STORAGE_KEY) || defaultCountry.Slug\n      this.fetchStatsByCountry(this.selectedCountry)\n    }\n  }\n\n  setDocumentTitle = (country: string) => {\n    document.title = `Stats for ${country}`\n  }\n\n  async fetchCountries() {\n    runInAction(() => {\n      this.loading = true\n    })\n    this.countries = await CovidStatsService.countries()\n    runInAction(() => {\n      this.loading = false\n    })\n  }\n\n  fetchStatsByCountry = async (country: string) => {\n    runInAction(() => {\n      this.isFetchingStats = true\n    })\n    const period: Period = {\n      from: moment().clone().subtract(5, 'day').format(REQUEST_DATE_FORMAT),\n      to: moment().clone().format(REQUEST_DATE_FORMAT)\n    }\n    this.casesByCountry = await CovidStatsService.activeCases(country, period)\n    this.setDocumentTitle(this.selectedCountry)\n    window.localStorage.setItem(STORAGE_KEY, this.selectedCountry)\n    runInAction(() => {\n      this.isFetchingStats = false\n    })\n  }\n\n  get mostRecoveredCase(): { count: number, date: string } {\n\n    if (!this.casesByCountry.length) {\n      return {\n        count: 0,\n        date: ''\n      }\n    }\n\n    const count = Math.max(...this.casesByCountry.map(t => t.Recovered))\n    const foundedCase = this.casesByCountry.find(t => t.Recovered === count)\n\n    return {\n      count,\n      date: foundedCase ? moment(foundedCase.Date).format(DATE_FORMAT) : ''\n    }\n  }\n\n  render() {\n\n    if (this.loading) {\n      return (\n        <div className='overlay'><div className='loader'>Loading...</div></div>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <select className='App__select_country' value={this.selectedCountry} onChange={this.onSelectCountry}>\n          {this.countries.map(s => (\n            <option value={s.Slug} key={s.Country}>\n              {s.Country}\n            </option>\n          ))}\n        </select>\n\n        <div className='App__main'>\n          <div className='App__content'>\n            {this.casesByCountry.slice().reverse().map(activeCase => (\n              <div key={activeCase.Date} className='App__active_case'>\n                <div>\n                  <p className='date'>{moment(activeCase.Date).format(DATE_FORMAT)}</p>\n                </div>\n                <div>\n                  <div className='block'>\n                    <p className='section'><b>Active</b><span>{activeCase.Active}</span></p>\n                    <p className='section'><b>Deaths</b><span>{activeCase.Deaths}</span></p>\n                  </div>\n                  <div className='block'>\n                    <p className='section'><b>Confirmed</b><span>{activeCase.Confirmed}</span></p>\n                    <p className='section'><b>Recovered</b><span>{activeCase.Recovered}</span></p>\n                  </div>\n                </div>\n              </div>\n            ))}\n            {this.isFetchingStats && (\n              <div className='loader'>Loading...</div>\n            )}\n            {!this.casesByCountry.length && (\n              <h3 className='no_data'>\n                No cases! Hooray!\n              </h3>\n            )}\n          </div>\n          <div className='total'>\n            <p className='title'>Top recovered cases</p>\n            <h1 className='count'>{this.mostRecoveredCase.count}</h1>\n            <hr/>\n            <h1>{this.mostRecoveredCase.date}</h1>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  @action\n  onSelectCountry = (event: ChangeEvent<HTMLSelectElement>) => {\n    event.persist()\n    this.selectedCountry = event.target.value\n    this.fetchStatsByCountry(this.selectedCountry)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}